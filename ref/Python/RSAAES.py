from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP

# RSA (public key and private key)
# RSA encrypts a session key (AES)
# RSA IS SLOW (because it uses extremely large numbers)

# generate the keys
key = RSA.generate(2048)
private_key = key
public_key = key.public_key()

### RSA ENCRYPTION ###
data = "This is just a simple message".encode()
# this is the private key in AES (16 bytes for the private key)
# this will be used by the sender as well as the receiver (exchange)
session_key = get_random_bytes(16)
print(session_key)

# encrypt the session key with the public RSA key
# encryption --- public key
encrypt_rsa = PKCS1_OAEP.new(public_key)
# encrypted version of the session key
# send to the receiver
enc_session_key = encrypt_rsa.encrypt(session_key)

# encrypt the data with the AES session key
cipher_aes = AES.new(session_key, AES.MODE_GCM)
# digest can be used for authentication
# the cipher text was generated by AES
cipher_text, tag = cipher_aes.encrypt_and_digest(data)
nonce = cipher_aes.nonce

### RSA DECRYPTION ###
# receiver must have: cipher_text, RSA private key, tag, nonce
decrypt_rsa = PKCS1_OAEP.new(private_key)
sess_key = decrypt_rsa.decrypt(enc_session_key)

decrypt_aes = AES.new(sess_key, AES.MODE_GCM, nonce)
plain_text = decrypt_aes.decrypt_and_verify(cipher_text, tag)
print(plain_text.decode())